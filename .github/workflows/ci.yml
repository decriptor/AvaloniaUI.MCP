name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.300'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: '**/coverage.cobertura.xml'
        fail_ci_if_error: false

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Check formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
      
    - name: Run static analysis
      run: |
        dotnet build --configuration Release --verbosity normal
        
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Run security audit
      run: dotnet list package --vulnerable --include-transitive
      
    - name: Check for outdated packages
      run: dotnet list package --outdated

  functional-test:
    name: Functional Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Test MCP Server Startup
      run: |
        # Test server startup with timeout to prevent hanging
        echo "Testing MCP Server startup..."
        
        # Run server with timeout and capture output
        if timeout 5s dotnet run --project src/AvaloniaUI.MCP/AvaloniaUI.MCP.csproj > server_output.log 2>&1; then
          echo "‚úÖ Server ran without immediate errors"
        else
          EXIT_CODE=$?
          if [ $EXIT_CODE -eq 124 ]; then
            echo "‚úÖ Server started and ran for expected duration (timeout reached)"
          else
            echo "‚ùå Server failed with exit code: $EXIT_CODE"
            echo "Server output:"
            cat server_output.log
            exit 1
          fi
        fi
        
        # Check for any critical errors in the output
        if grep -qi "unhandled exception\|fatal error" server_output.log; then
          echo "‚ùå Server encountered fatal errors:"
          cat server_output.log
          exit 1
        fi
        
        echo "‚úÖ MCP Server startup test completed successfully"
        
    - name: Validate Data Files
      run: |
        echo "Validating JSON data files..."
        
        # Check if data files exist
        for file in src/AvaloniaUI.MCP/Data/*.json; do
          if [[ -f "$file" ]]; then
            echo "Validating $file..."
            if python3 -m json.tool "$file" > /dev/null; then
              echo "‚úÖ $file is valid JSON"
            else
              echo "‚ùå $file is invalid JSON"
              exit 1
            fi
          else
            echo "‚ùå Data file $file not found"
            exit 1
          fi
        done
        
    - name: Test Project Generation
      run: |
        echo "Testing project generation functionality..."
        
        # Create a test directory
        mkdir -p test-output
        
        # We'll add more functional tests here as needed
        echo "‚úÖ Functional tests completed"

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [build, code-quality, security, functional-test]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    strategy:
      matrix:
        runtime: [win-x64, linux-x64, osx-x64, osx-arm64]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Publish application
      run: |
        dotnet publish src/AvaloniaUI.MCP/AvaloniaUI.MCP.csproj \
          --configuration Release \
          --runtime ${{ matrix.runtime }} \
          --self-contained true \
          --output ./publish/${{ matrix.runtime }} \
          -p:PublishSingleFile=true \
          -p:PublishTrimmed=true \
          -p:TrimMode=partial
          
    - name: Create archive
      run: |
        cd publish/${{ matrix.runtime }}
        if [[ "${{ matrix.runtime }}" == win-* ]]; then
          zip -r ../avaloniaui-mcp-${{ matrix.runtime }}.zip .
        else
          tar -czf ../avaloniaui-mcp-${{ matrix.runtime }}.tar.gz .
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: avaloniaui-mcp-${{ matrix.runtime }}
        path: publish/avaloniaui-mcp-${{ matrix.runtime }}.*
        retention-days: 30

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate README
      run: |
        # Check if README exists and has basic content
        if [[ -f "README.md" ]]; then
          echo "‚úÖ README.md exists"
          
          # Check for essential sections
          if grep -q "# AvaloniaUI MCP Server" README.md; then
            echo "‚úÖ README has proper title"
          else
            echo "‚ùå README missing proper title"
            exit 1
          fi
          
          if grep -q "Installation" README.md; then
            echo "‚úÖ README has installation section"
          else
            echo "‚ùå README missing installation section"
            exit 1
          fi
          
          if grep -q "Usage" README.md; then
            echo "‚úÖ README has usage section"
          else
            echo "‚ùå README missing usage section"
            exit 1
          fi
        else
          echo "‚ùå README.md not found"
          exit 1
        fi
        
    - name: Validate CLAUDE.md
      run: |
        if [[ -f "CLAUDE.md" ]]; then
          echo "‚úÖ CLAUDE.md exists"
          
          if grep -q "MCP Server Capabilities" CLAUDE.md; then
            echo "‚úÖ CLAUDE.md has capabilities section"
          else
            echo "‚ùå CLAUDE.md missing capabilities section"
            exit 1
          fi
        else
          echo "‚ùå CLAUDE.md not found"
          exit 1
        fi

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build, code-quality, security, functional-test]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.build.result == 'success' && needs.code-quality.result == 'success' && needs.security.result == 'success' && needs.functional-test.result == 'success'
      run: |
        echo "üéâ All CI checks passed successfully!"
        
    - name: Notify on failure
      if: needs.build.result == 'failure' || needs.code-quality.result == 'failure' || needs.security.result == 'failure' || needs.functional-test.result == 'failure'
      run: |
        echo "‚ùå CI checks failed. Please review the logs."
        exit 1